import serial
import sys

if (len(sys.argv) == 1):
	print('Usage: {} [COM-Port] {{[enable-error-message]}}'.format(sys.argv[0]))
	quit()

smlData = [
	# OK
	['OK000', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5300000101016301e700760554f1580062006200726302017101636079000000001b1b1b1b1a036004'],
	['OK256', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5301000101016345ec00760554f1580062006200726302017101636079000000001b1b1b1b1a03f714'],
	['OK512', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5302000101016389f100760554f1580062006200726302017101636079000000001b1b1b1b1a034e25'],
	['OK786', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe53030001010163cdfa00760554f1580062006200726302017101636079000000001b1b1b1b1a03d935'],
	# Wrong CRC	
	['ECRC1', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe53030001010163cdfa00760554f1580062006200726302017101636079000000001b1b1b1b1a0300ff'],
	['ECRC2', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5303000101016300ff00760554f1580062006200726302017101636079000000001b1b1b1b1a0301ae'],
	# Interrupt
	['EP1a  ', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f1'],
	['EP1b  ', '5800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5300000101016301e700760554f1580062006200726302017101636079000000001b1b1b1b1a036004'],
	# Incomplete
	['EP2a ', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f1'],
	['EP2b ', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5300000101016301e700760554f1580062006200726302017101636079000000001b1b1b1b1a036004'],
	['EP2c ', '5800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5300000101016301e700760554f1580062006200726302017101636079000000001b1b1b1b1a036004'],
	# Timeout
	['ETOa  ', ''],
	['ETOb  ', ''],
	['ETOc  ', '']
]

ENABLE_ERROR_MESSAGES = len(sys.argv) > 2

if (not(ENABLE_ERROR_MESSAGES)):
	del smlData[4:]

for i in range(len(smlData)):
	smlData[i][1] = bytearray.fromhex(smlData[i][1])

with serial.Serial(sys.argv[1], timeout=1) as ser:
	index = 0

	while True:
		data = ser.read()
		if (len(data) > 0):
			print(data.decode(encoding = 'utf-8', errors = 'ignore'), end='')
			
		else:
			print('[->{}]'.format(smlData[index][0]), end='')
			ser.write(smlData[index][1])
			index = (index + 1) % len(smlData)