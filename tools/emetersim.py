#!/usr/bin/python3
#
# Script to test sml2emeter without a real energy meter
#
# You need pySerial installed:
# python3 -m pip install pyserial
#
# To test with a nodemcu on windows use:
# python emetersim.py COM4
#
# Where COM4 is the serial port of the nodemcu.
#
# To test the linux version with a virtual com-port use:
# socat -d -d -v pty,raw,echo=0,link=./reader pty,raw,echo=0,link=./writer
# sml2emeter reader
# python3 emetersim.py writer 0 1
#

from serial import Serial, SerialException
from argparse import ArgumentParser

sml_packets = [
	# OK
	['OK000', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5300000101016301e700760554f1580062006200726302017101636079000000001b1b1b1b1a036004'],
	['OK256', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5301000101016345ec00760554f1580062006200726302017101636079000000001b1b1b1b1a03f714'],
	['OK512', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5302000101016389f100760554f1580062006200726302017101636079000000001b1b1b1b1a034e25'],
	['OK786', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe53030001010163cdfa00760554f1580062006200726302017101636079000000001b1b1b1b1a03d935'],
	# Wrong CRC	
	['ECRC1', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe53030001010163cdfa00760554f1580062006200726302017101636079000000001b1b1b1b1a0300ff'],
	['ECRC2', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5303000101016300ff00760554f1580062006200726302017101636079000000001b1b1b1b1a0301ae'],
	# Interrupt
	['EP1a  ', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f1'],
	['EP1b  ', '5800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5300000101016301e700760554f1580062006200726302017101636079000000001b1b1b1b1a036004'],
	# Incomplete
	['EP2a ', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f1'],
	['EP2b ', '1b1b1b1b01010101760552f15800620062007263010176010102310b0a01445a4700ff00ff00726201641da6aa620263906300760553f15800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5300000101016301e700760554f1580062006200726302017101636079000000001b1b1b1b1a036004'],
	['EP2c ', '5800620062007263070177010b0a01445a4700ff00ff00070100620affff726201641da6aa7577070100603201010172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a4700ff00ff000177070100010800ff641c01047262016200621e52ff642678f40177070100020800ff017262016200621e52ff62000177070100100700ff017262016200621b52fe5300000101016301e700760554f1580062006200726302017101636079000000001b1b1b1b1a036004'],
	# Timeout
	['ETOa  ', ''],
	['ETOb  ', ''],
	['ETOc  ', '']
]

parser = ArgumentParser(prog = 'SML E-Meter-Simulator',
						description = 'Test script to send SML messages to a serial port.')
parser.add_argument('com_port', help='COM-Port to use for sending messages')
parser.add_argument('-e', '--errormsgs', dest='error_messages', action='store_true', help='Send also error messages.', default=False)
parser.add_argument('--rtscts', dest = 'rtscts', action='store_true', help='Enable RTS/CTS', default=False)
parser.add_argument('--dsrdtr', dest = 'dsrdtr', action='store_true', help='Enable DSR/DTR', default=False)

args = parser.parse_args()

# Optionally remove messages with errors
if not(args.error_messages):
	sml_packets = [e for e in sml_packets if e[0].startswith('OK')]

# Convert messages to byte-arrays ...
for i in range(len(sml_packets)):
	sml_packets[i][1] = bytearray.fromhex(sml_packets[i][1])

try:
	with Serial(args.com_port, timeout=1, rtscts=args.rtscts, dsrdtr=args.dsrdtr) as serial_port:
		index = 0

		while True:
			data = serial_port.read()
			if (len(data) > 0):
				print(data.decode(encoding = 'utf-8', errors = 'ignore'), end='')
			
			else:
				(description, packet) = sml_packets[index]
				print(f'[->{description}]', end='')
				serial_port.write(packet)
				index = (index + 1) % len(sml_packets)

except SerialException as ex:
	print(f'\nException: {ex}')
	print(f'Please check if the com-port is correct and not used by another program.')

except KeyboardInterrupt:
	print('\nStop.')